plugins {
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.jetbrains.kotlin.jvm' version '1.9.24'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
}

group = 'br.com.kafka'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	implementation 'com.squareup.retrofit2:retrofit:2.11.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.11.0'
	implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'

	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0-RC'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

	testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0-RC")
	testImplementation 'org.mockito:mockito-core:5.0.0'
	testImplementation 'org.mockito:mockito-inline:5.0.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// Configura o Jacoco
jacoco {
	toolVersion = '0.8.8' // Versão do Jacoco
}

tasks.withType(Test) {
	finalizedBy tasks.jacocoTestReport // Gera o relatório após os testes
}

tasks.jacocoTestReport {
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
}

tasks.jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
	}
}

tasks.check.dependsOn tasks.jacocoTestCoverageVerification